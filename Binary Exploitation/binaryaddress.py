#!/usr/bin/env python3
# Version 1.0.0
# Date: 2025-03-09

#      _                _                           _
#     | |              | |                         (_)                                _____
#   __| |  ___    _____| |       ___  ___       __  _  _____    ___    _____ ____    /  ___\
#  / _` | / _ \  /   _/| |___   / _ \ \  \  _  /  /| | | __ \  / _ \  /  __/|  _ \  _| |_    
# | (_| || |_| | \  \  |  __ \ | |_| | |  \/ \/  | | | | |_| || |_| | \  \  | |_| |[_   _]
#  \__,_| \___/ |____/ |_,| |_| \___/   \___/\__/  |_| | ___/  \___/ |____/ | ___/   | |
#                                                      | |                  | |      |_|
#                                                      |_|                  |_|

# This is a script to translate binary pointer memory addresses from local binaries to remote binaries.
# It can help you find the memory address of a function in a remote binary.

import sys
import os
import subprocess
import re

def main():
    print("Enter the address of a local function address (e.g. 0x4005c0):")
    local_address = input()
    local_address = int(local_address, 16) # Convert to int

    print("Enter the address of another known local function address (e.g. 0x4005c0):")
    local_address2 = input()
    local_address2 = int(local_address2, 16) # Convert to int

    print("Enter the address of the remote function address (e.g. 0x4005c0):")
    remote_address = input()
    remote_address = int(remote_address, 16) # Convert to int

    # Calculate offset
    offset = local_address - local_address2

    # Calculate remote win()
    win_remote = remote_address - offset

    #Print the result
    print(f"Calculated win() address in hosted environment: {hex(win_remote)}")

main()